{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/Container/Container.js","components/Layout/Layout.js","data/constants.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","feedback","type","className","data-feedback","onClick","FeedbackButton","propTypes","PropTypes","arrayOf","string","func","isRequired","Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Container","Layout","FEEDBACK_OPTIONS","App","state","handleFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAkBMA,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAEnC,OAECD,EAAQE,KAAI,SAACC,GAAD,OAhBS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUH,EAAsB,EAAtBA,gBACnC,OAEC,wBAAQI,KAAK,SAASC,UAAU,SAC/BC,gBAAeH,EAAUI,QAASP,EADnC,SAEEG,GADuDA,GAaxDK,CAAe,CAAEL,SAAUD,EAAQF,wBAKtCF,EAAgBW,UAAY,CAC3BV,QAASW,IAAUC,QAAQD,IAAUE,QACrCZ,gBAAiBU,IAAUG,KAAKC,YAGlBhB,QCdAiB,G,MAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,OACC,oCACC,qBAAIZ,UAAU,mBAAd,cAAmCW,KAGlCC,OCDWC,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC4B3BC,G,MAzBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAChD,OACC,qCACED,EAAQ,GACR,qBAAInB,UAAU,mBAAd,UACC,wCAAsBgB,IAAd,QACR,2CAA4BC,IAApB,WACR,uCAAoBC,IAAZ,OACR,yCAAwBC,IAAhB,SACR,uDAAmDC,IAA3C,yBAGC,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,2BCZ1BO,G,MAHG,SAAC,GAAD,IAAGT,EAAH,EAAGA,SAAH,OACjB,qBAAKZ,UAAU,YAAf,SAA4BY,MCMdU,EANA,SAAC,GAAD,IAAGV,EAAH,EAAGA,SAAH,OACb,mCACE,cAAC,EAAD,UAAYA,OCNHW,EAAmB,CAAE,OAAQ,UAAW,OCwDtCC,E,4MAhDbC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPQ,eAAiB,YAAiB,IACxB5B,EADuB,EAAb6B,OACUC,QAApB9B,SACR,EAAK+B,UAAS,SAAAC,GAAS,sBAAShC,EAAYgC,EAAWhC,GAAa,O,EAEtEiC,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBT,KADiB,EACXC,QADW,EACFC,K,EAGzBc,gCAAkC,WAAO,IAC/BhB,EAAS,EAAKS,MAAdT,KACFG,EAAQ,EAAKY,qBACnB,OAAOZ,EAAQc,KAAKC,MAAOlB,EAAOG,EAAS,KAAO,G,4CAEpD,WAAU,IAAD,EACwBgB,KAAKV,MAA5BT,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQgB,KAAKJ,qBACbX,EAAqBe,KAAKH,kCAChC,OACE,eAAC,EAAD,WAEE,cAAC,EAAD,CAASrB,MAAM,wBAAf,SAEE,cAAC,EAAD,CAAiBjB,QAAS6B,EAAkB5B,gBAAiBwC,KAAKT,mBAEpE,cAAC,EAAD,CAASf,MAAM,aAAf,SACE,cAAC,EAAD,CACEK,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GApCdgB,a,YCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.af50f2af.chunk.js","sourcesContent":["// import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './FeedbackOptions.css';\r\n\r\n\r\n\r\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\r\n\treturn (\r\n\r\n\t\t<button type='button' className=\"Button\"\r\n\t\t\tdata-feedback={feedback} onClick={onLeaveFeedback} key={feedback}>\r\n\t\t\t{feedback}\r\n\t\t</button >\r\n\r\n\r\n\t)\r\n}\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n\r\n\treturn (\r\n\r\n\t\toptions.map((option) =>\r\n\t\t\tFeedbackButton({ feedback: option, onLeaveFeedback }))\r\n\t)\r\n\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.arrayOf(PropTypes.string),\r\n\tonLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FeedbackOptions","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './Section.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<h1 className=\"Container__title\"> {title}</h1>\r\n\r\n\r\n\t\t\t{children}\r\n\t\t</section >\r\n\t)\r\n}\r\nSection.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tchildren: PropTypes.element.isRequired,\r\n}\r\nexport default Section","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>\r\n\r\n\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Notification from '../Notification';\r\nimport './Statistics.css';\r\n\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{total > 0 && (\r\n\t\t\t\t<ul className=\"Statistics__list\">\r\n\t\t\t\t\t<li key='good'>Good: {good}</li>\r\n\t\t\t\t\t<li key='neutral'>Neutral: {neutral}</li>\r\n\t\t\t\t\t<li key='bad'>Bad: {bad}</li>\r\n\t\t\t\t\t<li key='total'>Total: {total}</li>\r\n\t\t\t\t\t<li key='positivePercentage'>Positive Percentage: {positivePercentage}</li>\r\n\t\t\t\t</ul>\r\n\t\t\t)}\r\n\t\t\t{total === 0 && <Notification message=\"No feedback given\" />\r\n\t\t\t}\r\n\t\t</>\r\n\t)\r\n}\r\nStatistics.propTypes = {\r\n\tgood: PropTypes.number.isRequired,\r\n\tneutral: PropTypes.number.isRequired,\r\n\tbad: PropTypes.number.isRequired,\r\n\ttotal: PropTypes.number.isRequired,\r\n\tpositivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics","import React from 'react';\nimport './Container.css';\n\nconst Container = ({ children }) =>\n\t<div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import React from 'react';\n\nimport Container from '../Container';\n\nconst Layout = ({ children }) => (\n  <>\n    <Container>{children}</Container>\n  </>\n);\n\nexport default Layout;\n","export const FEEDBACK_OPTIONS = [ 'good', 'neutral', 'bad' ]","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport Layout from './components/Layout';\nimport { FEEDBACK_OPTIONS } from './data/constants';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n  handleFeedback = ({ target }) => {\n    const { feedback } = target.dataset\n    this.setState(prevState => ({ [ feedback ]: prevState[ feedback ] + 1 }))\n  }\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state\n    return good + neutral + bad\n  }\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state\n    const total = this.countTotalFeedback()\n    return total ? Math.round((good / total) * 100) : 0\n  }\n  render() {\n    const { good, neutral, bad } = this.state\n    const total = this.countTotalFeedback()\n    const positivePercentage = this.countPositiveFeedbackPercentage()\n    return (\n      <Layout>\n\n        <Section title='Please leave feedback'>\n\n          <FeedbackOptions options={FEEDBACK_OPTIONS} onLeaveFeedback={this.handleFeedback} />\n        </Section>\n        <Section title='Statistics'>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n\n      </Layout>\n\n\n\n\n    );\n  }\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport '../node_modules/modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}